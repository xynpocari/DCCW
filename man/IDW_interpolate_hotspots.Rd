% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IDW_interpolate_hotspots.R
\name{IDW_interpolate_hotspots}
\alias{IDW_interpolate_hotspots}
\title{Hotspot IDW interpolation}
\usage{
IDW_interpolate_hotspots(
  hotspots,
  fire_perimeter,
  reference_grid,
  interval = "Daily",
  format = "Raster",
  cumulative = TRUE,
  output_directory = NULL,
  filename_prefix = NULL
)
}
\arguments{
\item{hotspots}{sf points representing VIIRS or MODIS hotspots. The output of calling \code{VIIRS_hotspots_grab()} or \code{MODIS_hotspots_grab}. VIIRS is recommended due to higher spatial resolution.}

\item{fire_perimeter}{sf polygon representing the final fire perimeter. The interpolated hotspots are masked to this polygon. Likely the output of \code{simplify_NBAC()}.}

\item{reference_grid}{Reference grid to interpolate hotspot values onto. E.g. the output from calling \code{fbp_fuel_grab()}.}

\item{interval}{What interval of time should each resulting layer represent? Choices are \code{'Daily'} or \code{'Hourly'}. At this time, only \code{'Daily'} is recommended, due to low confidence of hourly estimates.}

\item{format}{Format of returned object. Choices are \code{'Raster'}, which returns a RasterBrick, or \code{'Polygon'}, which returns a simple feature. Defaults to \code{'Raster'}.}

\item{cumulative}{Logical. Should layers represent cumulative area burned? Defaults to \code{TRUE}.}

\item{output_directory}{Optional. Output directory where a NetCDF will be saved. Currently export of polygon format not supported.}

\item{filename_prefix}{Optional. String that will be appended to the start of the exported raster file name. Ignored if \code{output_directory = NULL}.}
}
\value{
RasterBrick if \code{format = 'Raster'} or an sf polygon is \code{format = 'Polygon'}
}
\description{
Estimate daily area of burn using IDW interpolation of hotspots epoch.
}
\details{
This function uses IDW interpolation on the epoch field of hotspot points in order to estimate daily area burned.

If the output format is \code{'Raster'}, then the resulting RasterBrick will consist of layers that have an associated z value representing the end of the daily burn interval.
The raster layers will consist of 1s (burned pixels) and 0s (unburned pixels). The cumulative argument defines whether the rasters depict cumulative area burned.

Note that 'Daily' refers to a 24 hr period from 9AM on a given day to 8:59AM on the subsequent day (a "day" does not start at midnight).

This function requires very specific inputs, which are derived from running other functions created for the Fire Progression Reanalysis project.
}
\note{
This function will throw errors the first time it has run, but the task has actually succeeded.
}
\examples{
\dontrun{
library(sf)
library(raster)
library(lubridate)
library(dplyr)
library(tibble)
library(lutz)
library(gstat)
library(units)

# download 2019 NBAC to tempfile
nbac_temp <- tempfile(fileext = '.zip')
download.file(destfile = nbac_temp,
              url = 'https://cwfis.cfs.nrcan.gc.ca/downloads/nbac/nbac_2019_r9_20200703.zip')

nbac_files <- unzip(nbac_temp, list = T)
nbac <- unzip(zipfile = nbac_temp, files = nbac_files$Name[1:11], exdir = gsub('.zip','',nbac_temp))
nbac <- st_read(dsn = nbac[7]) # import nbac to R as sf polygons

# search for the 2019 McMillan wildfire, CFS ID SWF-049-2019
fire <- searchNBAC_by_alias(nbac_file = nbac, alias = 'SWF-049-2019')

# simplify NBAC to make it easier to work with
fire <- simplify_NBAC(fire)
plot(fire[,1]) # view the McMillan fire

# grab VIIRS hotspots within the fire perimeter + 2 km buffer
viirs <- VIIRS_hotspots_grab(reference_poly = fire,
                             start_date = '2019-05-18',
                             end_date = '2019-06-10',
                             buff_width = 2000)
plot(viirs[,'acq_date']) # view hotspots

# grab fbp fuels grid based on fire perimeter + 2 km buffer
fbp_fuel <- fbp_fuel_grab(reference_poly = fire,
                          match_crs = TRUE,
                          buff_width = 2000,
                          fbp_grid = NULL)
plot(fbp_fuel) # view fuels grid, which will be our reference grid

# interpolate hotspots to fuels grid
# NOTE: the first time this is run, errors may occur, but the task actually was successful.
IDW <- IDW_interpolate_hotspots(hotspots = viirs,
                               fire_perimeter = fire,
                               reference_grid = fbp_fuel,
                               interval = 'Daily',
                               format = 'Raster',
                               cumulative = FALSE,
                               output_directory = NULL,
                               filename_prefix = NULL)

plot(IDW[[1:4]]) # non-cumulative estimated daily area of burn
}
}
